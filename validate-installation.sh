#!/bin/bash

# üîç Script de Validaci√≥n para Suna EasyPanel
# Este script verifica que todos los archivos y configuraciones est√©n correctos

echo "üîç Validando instalaci√≥n de Suna para EasyPanel..."
echo "================================================"

ERRORS=0
WARNINGS=0

# Funci√≥n para mostrar errores
show_error() {
    echo "‚ùå ERROR: $1"
    ERRORS=$((ERRORS + 1))
}

# Funci√≥n para mostrar advertencias
show_warning() {
    echo "‚ö†Ô∏è  WARNING: $1"
    WARNINGS=$((WARNINGS + 1))
}

# Funci√≥n para mostrar √©xito
show_success() {
    echo "‚úÖ $1"
}

echo ""
echo "üìÅ Verificando archivos requeridos..."
echo "-------------------------------------"

# Verificar archivos esenciales
if [ -f "docker-compose.easypanel.yml" ]; then
    show_success "docker-compose.easypanel.yml encontrado"
else
    show_error "docker-compose.easypanel.yml no encontrado"
fi

if [ -f "init.sql" ]; then
    show_success "init.sql encontrado"
    # Verificar que el archivo tenga contenido suficiente
    LINES=$(wc -l < init.sql)
    if [ $LINES -gt 400 ]; then
        show_success "init.sql tiene $LINES l√≠neas (esquema completo)"
    else
        show_warning "init.sql tiene solo $LINES l√≠neas (podr√≠a estar incompleto)"
    fi
else
    show_error "init.sql no encontrado"
fi

if [ -f ".env" ]; then
    show_success ".env encontrado"
else
    if [ -f ".env.easypanel.example" ]; then
        show_warning ".env no encontrado, pero .env.easypanel.example est√° disponible"
        echo "üí° Ejecuta: cp .env.easypanel.example .env"
    else
        show_error ".env y .env.easypanel.example no encontrados"
    fi
fi

if [ -f "postgres.conf" ]; then
    show_success "postgres.conf encontrado"
else
    show_warning "postgres.conf no encontrado (usar√° configuraci√≥n por defecto)"
fi

echo ""
echo "‚öôÔ∏è Verificando configuraci√≥n .env..."
echo "-----------------------------------"

if [ -f ".env" ]; then
    # Verificar variables cr√≠ticas
    if grep -q "WEBHOOK_BASE_URL=https://your-domain.com" .env; then
        show_error "WEBHOOK_BASE_URL a√∫n tiene el valor por defecto"
    elif grep -q "WEBHOOK_BASE_URL=https://" .env; then
        show_success "WEBHOOK_BASE_URL configurado"
    else
        show_error "WEBHOOK_BASE_URL no encontrado o mal configurado"
    fi
    
    if grep -q "POSTGRES_PASSWORD=suna_password_change_me" .env; then
        show_error "POSTGRES_PASSWORD a√∫n tiene el valor por defecto"
    elif grep -q "POSTGRES_PASSWORD=" .env; then
        show_success "POSTGRES_PASSWORD configurado"
    else
        show_error "POSTGRES_PASSWORD no encontrado"
    fi
    
    if grep -q "JWT_SECRET=your_super_secure" .env; then
        show_error "JWT_SECRET a√∫n tiene el valor por defecto"
    elif grep -q "JWT_SECRET=" .env && [ $(grep "JWT_SECRET=" .env | cut -d'=' -f2 | wc -c) -gt 32 ]; then
        show_success "JWT_SECRET configurado (suficientemente largo)"
    else
        show_error "JWT_SECRET no configurado o muy corto (<32 chars)"
    fi
    
    # Verificar APIs de IA
    AI_PROVIDERS=0
    if grep -q "OPENAI_API_KEY=sk-" .env; then
        show_success "OpenAI API Key configurado"
        AI_PROVIDERS=$((AI_PROVIDERS + 1))
    fi
    
    if grep -q "ANTHROPIC_API_KEY=sk-ant-" .env; then
        show_success "Anthropic API Key configurado"
        AI_PROVIDERS=$((AI_PROVIDERS + 1))
    fi
    
    if grep -q "OPENROUTER_API_KEY=sk-or-" .env; then
        show_success "OpenRouter API Key configurado"
        AI_PROVIDERS=$((AI_PROVIDERS + 1))
    fi
    
    if grep -q "GROQ_API_KEY=gsk_" .env; then
        show_success "Groq API Key configurado"
        AI_PROVIDERS=$((AI_PROVIDERS + 1))
    fi
    
    if [ $AI_PROVIDERS -eq 0 ]; then
        show_error "No se encontr√≥ ning√∫n proveedor de IA configurado"
    elif [ $AI_PROVIDERS -eq 1 ]; then
        show_success "$AI_PROVIDERS proveedor de IA configurado"
    else
        show_success "$AI_PROVIDERS proveedores de IA configurados"
    fi
    
    # Verificar APIs de b√∫squeda
    if grep -q "TAVILY_API_KEY=tvly-" .env; then
        show_success "Tavily API Key configurado"
    else
        show_error "TAVILY_API_KEY no configurado"
    fi
    
    if grep -q "FIRECRAWL_API_KEY=fc-" .env; then
        show_success "Firecrawl API Key configurado"
    else
        show_error "FIRECRAWL_API_KEY no configurado"
    fi
    
    # Verificar Daytona
    if grep -q "DAYTONA_API_KEY=" .env && ! grep -q "DAYTONA_API_KEY=$" .env; then
        show_success "Daytona API Key configurado"
    else
        show_error "DAYTONA_API_KEY no configurado"
    fi
    
else
    show_error "No se puede verificar .env (archivo no existe)"
fi

echo ""
echo "üê≥ Verificando Docker..."
echo "-----------------------"

if command -v docker >/dev/null 2>&1; then
    show_success "Docker instalado"
    if docker info >/dev/null 2>&1; then
        show_success "Docker daemon corriendo"
    else
        show_error "Docker daemon no est√° corriendo"
    fi
else
    show_error "Docker no instalado"
fi

if command -v docker-compose >/dev/null 2>&1; then
    show_success "Docker Compose instalado"
    # Verificar sintaxis del compose file
    if [ -f "docker-compose.easypanel.yml" ]; then
        if docker-compose -f docker-compose.easypanel.yml config >/dev/null 2>&1; then
            show_success "docker-compose.easypanel.yml sintaxis correcta"
        else
            show_error "docker-compose.easypanel.yml tiene errores de sintaxis"
        fi
    fi
else
    show_error "Docker Compose no instalado"
fi

echo ""
echo "üíæ Verificando espacio en disco..."
echo "---------------------------------"

AVAILABLE_GB=$(df . | tail -1 | awk '{print int($4/1024/1024)}')
if [ $AVAILABLE_GB -gt 20 ]; then
    show_success "Espacio disponible: ${AVAILABLE_GB}GB (suficiente)"
elif [ $AVAILABLE_GB -gt 10 ]; then
    show_warning "Espacio disponible: ${AVAILABLE_GB}GB (m√≠nimo recomendado: 20GB)"
else
    show_error "Espacio disponible: ${AVAILABLE_GB}GB (insuficiente - se necesitan al menos 10GB)"
fi

echo ""
echo "üåê Verificando conectividad..."
echo "-----------------------------"

if curl -s --max-time 5 https://api.openai.com >/dev/null; then
    show_success "Conectividad a OpenAI OK"
else
    show_warning "No se puede conectar a OpenAI (podr√≠a ser por firewall)"
fi

if curl -s --max-time 5 https://api.anthropic.com >/dev/null; then
    show_success "Conectividad a Anthropic OK"
else
    show_warning "No se puede conectar a Anthropic (podr√≠a ser por firewall)"
fi

echo ""
echo "üìä RESUMEN DE VALIDACI√ìN"
echo "======================="

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    echo "üéâ ¬°TODO PERFECTO! La instalaci√≥n deber√≠a funcionar sin problemas."
elif [ $ERRORS -eq 0 ]; then
    echo "‚úÖ Sin errores cr√≠ticos encontrados."
    echo "‚ö†Ô∏è  $WARNINGS advertencias - revisa las recomendaciones arriba."
    echo ""
    echo "üí° La instalaci√≥n deber√≠a funcionar, pero revisa las advertencias."
else
    echo "‚ùå $ERRORS errores cr√≠ticos encontrados."
    echo "‚ö†Ô∏è  $WARNINGS advertencias adicionales."
    echo ""
    echo "üö´ DEBES CORREGIR LOS ERRORES ANTES DE INSTALAR"
    echo ""
    echo "üìã Lista de verificaci√≥n:"
    echo "1. Configura todas las variables en .env"
    echo "2. Cambia los valores por defecto"
    echo "3. Aseg√∫rate de tener Docker funcionando"
    echo "4. Verifica que tengas suficiente espacio en disco"
fi

echo ""
echo "üöÄ Para instalar despu√©s de corregir errores:"
echo "docker-compose -f docker-compose.easypanel.yml up -d"

exit $ERRORS