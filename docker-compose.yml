services:
  # PostgreSQL Database (replacement for Supabase)
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-suna}
      POSTGRES_USER: ${POSTGRES_USER:-suna_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-suna_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # Performance optimizations
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 4MB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      # Custom PostgreSQL configuration for better performance
      - ./postgres.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    networks:
      - suna-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-suna_user} -d ${POSTGRES_DB:-suna}"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: |
      redis-server 
      --appendonly yes 
      --bind 0.0.0.0 
      --protected-mode no 
      --maxmemory 1gb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 0
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - suna-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API (Python/FastAPI)
  backend:
    image: python:3.11-slim
    working_dir: /app
    command: >
      sh -c "
      apt-get update &&
      apt-get install -y curl git build-essential &&
      pip install uv &&
      git clone --depth 1 https://github.com/es-oliverac/suna_ai.git /tmp/repo &&
      cp -r /tmp/repo/suna/backend/* /app/ &&
      uv sync &&
      uv run python api.py
      "
    restart: unless-stopped
    ports:
      - "8000:8000"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    environment:
      # Environment Mode
      - ENV_MODE=production
      
      # Database Configuration (PostgreSQL instead of Supabase)
      - SUPABASE_URL=postgresql://${POSTGRES_USER:-suna_user}:${POSTGRES_PASSWORD:-suna_password_change_me}@postgres:5432/${POSTGRES_DB:-suna}
      - SUPABASE_ANON_KEY=${JWT_SECRET:-your_jwt_secret_key_here}
      - SUPABASE_SERVICE_ROLE_KEY=${JWT_SECRET:-your_jwt_secret_key_here}
      - SUPABASE_JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_SSL=false
      
      # LLM Providers (at least one required)
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      - XAI_API_KEY=${XAI_API_KEY:-}
      - MORPH_API_KEY=${MORPH_API_KEY:-}
      
      # AWS Bedrock (optional)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION_NAME=${AWS_REGION_NAME:-}
      
      # OpenAI Compatible APIs
      - OPENAI_COMPATIBLE_API_KEY=${OPENAI_COMPATIBLE_API_KEY:-}
      - OPENAI_COMPATIBLE_API_BASE=${OPENAI_COMPATIBLE_API_BASE:-}
      
      # Search & Scraping APIs
      - TAVILY_API_KEY=${TAVILY_API_KEY:-}
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY:-}
      - FIRECRAWL_URL=${FIRECRAWL_URL:-https://api.firecrawl.dev}
      - RAPID_API_KEY=${RAPID_API_KEY:-}
      
      # Daytona Sandbox (required for agent execution)
      - DAYTONA_API_KEY=${DAYTONA_API_KEY:-}
      - DAYTONA_SERVER_URL=${DAYTONA_SERVER_URL:-https://app.daytona.io/api}
      - DAYTONA_TARGET=${DAYTONA_TARGET:-us}
      
      # Security & Webhooks
      - MCP_CREDENTIAL_ENCRYPTION_KEY=${MCP_CREDENTIAL_ENCRYPTION_KEY:-}
      - WEBHOOK_BASE_URL=${WEBHOOK_BASE_URL:-https://your-domain.com}
      - TRIGGER_WEBHOOK_SECRET=${TRIGGER_WEBHOOK_SECRET:-}
      
      # Admin Configuration
      - KORTIX_ADMIN_API_KEY=${KORTIX_ADMIN_API_KEY:-}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-}
      
      # Integrations (Optional)
      - COMPOSIO_API_KEY=${COMPOSIO_API_KEY:-}
      - COMPOSIO_WEBHOOK_SECRET=${COMPOSIO_WEBHOOK_SECRET:-}
      - COMPOSIO_API_BASE=${COMPOSIO_API_BASE:-https://backend.composio.dev}
      
      # Pipedream Integration (Optional)
      - PIPEDREAM_PROJECT_ID=${PIPEDREAM_PROJECT_ID:-}
      - PIPEDREAM_CLIENT_ID=${PIPEDREAM_CLIENT_ID:-}
      - PIPEDREAM_CLIENT_SECRET=${PIPEDREAM_CLIENT_SECRET:-}
      - PIPEDREAM_X_PD_ENVIRONMENT=${PIPEDREAM_X_PD_ENVIRONMENT:-production}
      
      # Zendesk Integration (Optional)
      - ZENDESK_AUTH_CONFIG=${ZENDESK_AUTH_CONFIG:-}
      
      # Google Integrations (Optional)
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
      - GOOGLE_REDIRECT_URI=${WEBHOOK_BASE_URL:-https://your-domain.com}/api/google/callback
      - FRONTEND_URL=${WEBHOOK_BASE_URL:-https://your-domain.com}
      
      # Observability (Optional)
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY:-}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY:-}
      - LANGFUSE_HOST=${LANGFUSE_HOST:-https://cloud.langfuse.com}
      
      # Billing (Optional)
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET:-}
      - STRIPE_DEFAULT_PLAN_ID=${STRIPE_DEFAULT_PLAN_ID:-}
      - STRIPE_DEFAULT_TRIAL_DAYS=${STRIPE_DEFAULT_TRIAL_DAYS:-14}
      
      # Performance & Scaling Settings
      - WORKER_PROCESSES=${WORKER_PROCESSES:-4}
      - WORKER_THREADS=${WORKER_THREADS:-4}
      - WORKER_MAX_MEMORY=${WORKER_MAX_MEMORY:-2GB}
      - RATE_LIMIT_REQUESTS_PER_MINUTE=${RATE_LIMIT_REQUESTS_PER_MINUTE:-60}
      - RATE_LIMIT_API_CALLS_PER_MINUTE=${RATE_LIMIT_API_CALLS_PER_MINUTE:-100}
      - REDIS_CACHE_TTL=${REDIS_CACHE_TTL:-3600}
      - REDIS_SESSION_TTL=${REDIS_SESSION_TTL:-86400}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-100MB}
      - MAX_FILES_PER_UPLOAD=${MAX_FILES_PER_UPLOAD:-10}
      
      # Database Pool Settings
      - DB_POOL_SIZE=${DB_POOL_SIZE:-20}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-30}
      - DB_POOL_TIMEOUT=${DB_POOL_TIMEOUT:-30}
      
      # Monitoring & Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PORT=${METRICS_PORT:-9090}
      - HEALTH_CHECK_TIMEOUT=${HEALTH_CHECK_TIMEOUT:-30}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-60}
      
      # Security Settings
      - SESSION_SECRET=${SESSION_SECRET:-}
      - CORS_ORIGINS=${CORS_ORIGINS:-}
      - CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS:-true}
      
    volumes:
      - backend_logs:/app/logs
    networks:
      - suna-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Background Worker
  worker:
    image: python:3.11-slim
    working_dir: /app
    command: >
      sh -c "
      apt-get update &&
      apt-get install -y curl git build-essential &&
      pip install uv &&
      git clone --depth 1 https://github.com/es-oliverac/suna_ai.git /tmp/repo &&
      cp -r /tmp/repo/suna/backend/* /app/ &&
      uv sync &&
      uv run dramatiq --skip-logging --processes 4 --threads 4 run_agent_background
      "
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    environment:
      # Same environment variables as backend
      - ENV_MODE=production
      - SUPABASE_URL=postgresql://${POSTGRES_USER:-suna_user}:${POSTGRES_PASSWORD:-suna_password_change_me}@postgres:5432/${POSTGRES_DB:-suna}
      - SUPABASE_ANON_KEY=${JWT_SECRET:-your_jwt_secret_key_here}
      - SUPABASE_SERVICE_ROLE_KEY=${JWT_SECRET:-your_jwt_secret_key_here}
      - SUPABASE_JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_SSL=false
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      - XAI_API_KEY=${XAI_API_KEY:-}
      - MORPH_API_KEY=${MORPH_API_KEY:-}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION_NAME=${AWS_REGION_NAME:-}
      - OPENAI_COMPATIBLE_API_KEY=${OPENAI_COMPATIBLE_API_KEY:-}
      - OPENAI_COMPATIBLE_API_BASE=${OPENAI_COMPATIBLE_API_BASE:-}
      - TAVILY_API_KEY=${TAVILY_API_KEY:-}
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY:-}
      - FIRECRAWL_URL=${FIRECRAWL_URL:-https://api.firecrawl.dev}
      - RAPID_API_KEY=${RAPID_API_KEY:-}
      - DAYTONA_API_KEY=${DAYTONA_API_KEY:-}
      - DAYTONA_SERVER_URL=${DAYTONA_SERVER_URL:-https://app.daytona.io/api}
      - DAYTONA_TARGET=${DAYTONA_TARGET:-us}
      - MCP_CREDENTIAL_ENCRYPTION_KEY=${MCP_CREDENTIAL_ENCRYPTION_KEY:-}
      - WEBHOOK_BASE_URL=${WEBHOOK_BASE_URL:-https://your-domain.com}
      - TRIGGER_WEBHOOK_SECRET=${TRIGGER_WEBHOOK_SECRET:-}
      - KORTIX_ADMIN_API_KEY=${KORTIX_ADMIN_API_KEY:-}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-}
      - COMPOSIO_API_KEY=${COMPOSIO_API_KEY:-}
      - COMPOSIO_WEBHOOK_SECRET=${COMPOSIO_WEBHOOK_SECRET:-}
      - COMPOSIO_API_BASE=${COMPOSIO_API_BASE:-https://backend.composio.dev}
      - PIPEDREAM_PROJECT_ID=${PIPEDREAM_PROJECT_ID:-}
      - PIPEDREAM_CLIENT_ID=${PIPEDREAM_CLIENT_ID:-}
      - PIPEDREAM_CLIENT_SECRET=${PIPEDREAM_CLIENT_SECRET:-}
      - PIPEDREAM_X_PD_ENVIRONMENT=${PIPEDREAM_X_PD_ENVIRONMENT:-production}
      - ZENDESK_AUTH_CONFIG=${ZENDESK_AUTH_CONFIG:-}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
      - GOOGLE_REDIRECT_URI=${WEBHOOK_BASE_URL:-https://your-domain.com}/api/google/callback
      - FRONTEND_URL=${WEBHOOK_BASE_URL:-https://your-domain.com}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY:-}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY:-}
      - LANGFUSE_HOST=${LANGFUSE_HOST:-https://cloud.langfuse.com}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET:-}
      - STRIPE_DEFAULT_PLAN_ID=${STRIPE_DEFAULT_PLAN_ID:-}
      - STRIPE_DEFAULT_TRIAL_DAYS=${STRIPE_DEFAULT_TRIAL_DAYS:-14}
      - WORKER_PROCESSES=${WORKER_PROCESSES:-4}
      - WORKER_THREADS=${WORKER_THREADS:-4}
      - WORKER_MAX_MEMORY=${WORKER_MAX_MEMORY:-2GB}
      - RATE_LIMIT_REQUESTS_PER_MINUTE=${RATE_LIMIT_REQUESTS_PER_MINUTE:-60}
      - RATE_LIMIT_API_CALLS_PER_MINUTE=${RATE_LIMIT_API_CALLS_PER_MINUTE:-100}
      - REDIS_CACHE_TTL=${REDIS_CACHE_TTL:-3600}
      - REDIS_SESSION_TTL=${REDIS_SESSION_TTL:-86400}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-100MB}
      - MAX_FILES_PER_UPLOAD=${MAX_FILES_PER_UPLOAD:-10}
      - DB_POOL_SIZE=${DB_POOL_SIZE:-20}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-30}
      - DB_POOL_TIMEOUT=${DB_POOL_TIMEOUT:-30}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PORT=${METRICS_PORT:-9090}
      - HEALTH_CHECK_TIMEOUT=${HEALTH_CHECK_TIMEOUT:-30}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-60}
      - SESSION_SECRET=${SESSION_SECRET:-}
      - CORS_ORIGINS=${CORS_ORIGINS:-}
      - CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS:-true}
      
    volumes:
      - worker_logs:/app/logs
    networks:
      - suna-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend (Next.js)
  frontend:
    image: node:20-slim
    working_dir: /app
    command: >
      sh -c "
      apt-get update &&
      apt-get install -y git &&
      git clone --depth 1 https://github.com/es-oliverac/suna_ai.git /tmp/repo &&
      cp -r /tmp/repo/suna/frontend/* /app/ &&
      npm ci &&
      npm run build &&
      npm start
      "
    restart: unless-stopped
    ports:
      - "3000:3000"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    environment:
      - NEXT_PUBLIC_ENV_MODE=production
      - NEXT_PUBLIC_SUPABASE_URL=postgresql://${POSTGRES_USER:-suna_user}:${POSTGRES_PASSWORD:-suna_password_change_me}@postgres:5432/${POSTGRES_DB:-suna}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${JWT_SECRET:-your_jwt_secret_key_here}
      - NEXT_PUBLIC_BACKEND_URL=${WEBHOOK_BASE_URL:-https://your-domain.com}/api
      - NEXT_PUBLIC_URL=${WEBHOOK_BASE_URL:-https://your-domain.com}
      - NEXT_PUBLIC_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - NEXT_PUBLIC_POSTHOG_KEY=${POSTHOG_KEY:-}
      - KORTIX_ADMIN_API_KEY=${KORTIX_ADMIN_API_KEY:-}
      - EDGE_CONFIG=${EDGE_CONFIG:-}
      - NODE_ENV=production
      - HOSTNAME=0.0.0.0
      - PORT=3000
    networks:
      - suna-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  worker_logs:
    driver: local

networks:
  suna-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16